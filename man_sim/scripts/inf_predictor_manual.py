# -*- coding: utf-8 -*-
"""ML_PRED.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wpODT9PjARKY5a_ALvZBVO5McS5qvOJ1
"""
from sklearn.utils import Bunch
import numpy as np
import csv
from sklearn import neighbors
from sklearn.model_selection import train_test_split
import pandas as pd
import random

def load_data(filename,n):
    with open(filename) as csv_file:
        data_file = csv.reader(csv_file)
        next(data_file)
        n_samples = n # get the number of samples
        n_features = 3 # get the number of features
        #target_names = np.array([0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09,0.1,0.11,0.12,0.13,0.14,0.15,0.16,0.17,0.18,0.19,0.2]) # get the  target classes
        target_names = np.arange(0.01,0.5,0.05)
        data = np.empty((n_samples, n_features)) # create an N x M array for our data, .empty is faster than using .zeros, since it doesn't have to set all the elements to 0's, but it will contain some random numbers that were in memory at the time
        target = np.empty((n_samples,), dtype=np.int32) # as above, but we're creating a 1D array for our target classes

        for i, ir in enumerate(data_file): # enumerate adds a counter to an iterable and returns it
            data[i] = np.asarray(ir[:-1], dtype=np.float64)
            target[i] = np.asarray(ir[-1], dtype=np.float64)

    return data, target, target_names

def load_infection_data(filename, n, return_X_y=False):
    data, target, target_names = load_data(filename,n)

    if return_X_y:
        return data, target

    '''
        Bunch is a dictionary like object, that exposes it's key attributes, 
        For example:
        b = Bunch(a=1, b=2)
        b['b'] >>> 2
        b.b >>> 2
    '''
    return Bunch(data=data, target=target, # set our data and our target classes
                 target_names=target_names, # set the string names of our targets i.e. the probability of infection in steps of 0.05
                 feature_names=["ethnicity", "gender", "age"]) # set what our feature names are
def predict_infection(parameters):
    infections = load_infection_data(parameters['filepath'],parameters['N']) # load our custom data
    X = infections.data[:, :3]
    y = infections.target
    knn = neighbors.KNeighborsClassifier(weights='distance') # we are using knn classifier, and using the distance as weight
    # we can also pass the number of neighbours, n_neighbors=5 is the default value
    knn.fit(X, y)
    X_train, X_test, y_train, y_test = train_test_split(infections.data[:, :3], infections.target, test_size=0.8)
    print("Test set score: {:.2f}%".format(knn.score(X_test, y_test) * 100))
    dataClass = knn.predict([[parameters['ethnicity'], parameters['gender'], parameters['age']]]) # make prediction
    predicted_probability = infections.target_names[dataClass]
    print("Predicted infection probability:", (predicted_probability[0] * 100), "%")
    return predicted_probability[0]*100